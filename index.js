require('dotenv').config();
const { Bot, GrammyError, HttpError, InlineKeyboard } = require("grammy");
const { hydrate } = require("@grammyjs/hydrate");
require('./server');

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ –∑ —Ç–æ–∫–µ–Ω–æ–º –∑ –ø—Ä–æ—Ü–µ—Å—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞

const token = process.env.BOT_TOKEN;

if (!token) {
    console.error("BOT_TOKEN is not defined in the environment variables.");
    process.exit(1); // –í–∏—Ö—ñ–¥ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏, —è–∫—â–æ —Ç–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
}

const bot = new Bot(token);
bot.use(hydrate());

// –¢–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ escapedMessage –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏


// –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞
bot.api.setMyCommands([
    { command: "start", description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞" },
    { command: "menu", description: "–û—Ç—Ä–∏–º–∞—Ç–∏ –º–µ–Ω—é" },
]);

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command("start", async (ctx) => {
    await ctx.react("üî•");
    await ctx.reply("–ü—Ä–∏–≤—ñ—Ç, —è \\- –±–æ—Ç\\. –¢–≥ –∫–∞–Ω–∞–ª: \\[—Ü–µ —Å–∏–ª–∫–∞\\]\\(https://t\\.me//TestBotLearn\\)", {
        parse_mode: "MarkdownV2",
        disable_web_page_preview: true
    });
});


// –ö–Ω–æ–ø–∫–∏ —Ç–∞ –æ–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
const menuKeyboard = new InlineKeyboard()
    .text("–î—ñ–∑–Ω–∞—Ç–∏—Å—è —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "order-status")
    .text("–ó–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É", "support");
const backKeyboard = new InlineKeyboard().text("< –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back");

bot.command("menu", async (ctx) => {
    await ctx.reply("–í–∏–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é", { reply_markup: menuKeyboard });
});

bot.callbackQuery("order-status", async (ctx) => {
    await ctx.editMessageText("–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: –≤ –¥–æ—Ä–æ–∑—ñ", { reply_markup: backKeyboard });
    await ctx.answerCallbackQuery();
});

bot.callbackQuery("support", async (ctx) => {
    await ctx.editMessageText("–ù–∞–ø–∏—à—ñ—Ç—å –í–∞—à –∑–∞–ø–∏—Ç", { reply_markup: backKeyboard });
    await ctx.answerCallbackQuery();
});

bot.callbackQuery("back", async (ctx) => {
    await ctx.editMessageText("–í–∏–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é", { reply_markup: menuKeyboard });
    await ctx.answerCallbackQuery();
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`Error while handling update ${ctx.update.update_id}:`);
    const e = err.error;

    if (e instanceof GrammyError) {
        console.error("Error in request:", e.description);
    } else if (e instanceof HttpError) {
        console.error("Could not contact Telegram", e);
    } else {
        console.error("Unknown error:", e);
    }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();
